//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `CartVC`.
    static let cartVC = _R.storyboard.cartVC()
    /// Storyboard `FavoritesVC`.
    static let favoritesVC = _R.storyboard.favoritesVC()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MapVC`.
    static let mapVC = _R.storyboard.mapVC()
    /// Storyboard `OrdersVC`.
    static let ordersVC = _R.storyboard.ordersVC()
    /// Storyboard `ProfileVC`.
    static let profileVC = _R.storyboard.profileVC()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CartVC", bundle: ...)`
    static func cartVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cartVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FavoritesVC", bundle: ...)`
    static func favoritesVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.favoritesVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MapVC", bundle: ...)`
    static func mapVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mapVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OrdersVC", bundle: ...)`
    static func ordersVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ordersVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileVC", bundle: ...)`
    static func profileVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileVC)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 16 files.
  struct file {
    /// Resource file `Assortment.json`.
    static let assortmentJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Assortment", pathExtension: "json")
    /// Resource file `AuthenticationData.json`.
    static let authenticationDataJson = Rswift.FileResource(bundle: R.hostingBundle, name: "AuthenticationData", pathExtension: "json")
    /// Resource file `AuthenticationDataGuest.json`.
    static let authenticationDataGuestJson = Rswift.FileResource(bundle: R.hostingBundle, name: "AuthenticationDataGuest", pathExtension: "json")
    /// Resource file `Business.json`.
    static let businessJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Business", pathExtension: "json")
    /// Resource file `BusinessesList.json`.
    static let businessesListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "BusinessesList", pathExtension: "json")
    /// Resource file `CurrentFilters.json`.
    static let currentFiltersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "CurrentFilters", pathExtension: "json")
    /// Resource file `CurrentOrders.json`.
    static let currentOrdersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "CurrentOrders", pathExtension: "json")
    /// Resource file `Evolventa-Bold.ttf`.
    static let evolventaBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Evolventa-Bold", pathExtension: "ttf")
    /// Resource file `Evolventa-BoldOblique.ttf`.
    static let evolventaBoldObliqueTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Evolventa-BoldOblique", pathExtension: "ttf")
    /// Resource file `Evolventa-Oblique.ttf`.
    static let evolventaObliqueTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Evolventa-Oblique", pathExtension: "ttf")
    /// Resource file `Evolventa-Regular.ttf`.
    static let evolventaRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Evolventa-Regular", pathExtension: "ttf")
    /// Resource file `Favorites.json`.
    static let favoritesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Favorites", pathExtension: "json")
    /// Resource file `Orders.json`.
    static let ordersJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Orders", pathExtension: "json")
    /// Resource file `Products.json`.
    static let productsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Products", pathExtension: "json")
    /// Resource file `User.json`.
    static let userJson = Rswift.FileResource(bundle: R.hostingBundle, name: "User", pathExtension: "json")
    /// Resource file `UserGuest.json`.
    static let userGuestJson = Rswift.FileResource(bundle: R.hostingBundle, name: "UserGuest", pathExtension: "json")

    /// `bundle.url(forResource: "Assortment", withExtension: "json")`
    static func assortmentJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.assortmentJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AuthenticationData", withExtension: "json")`
    static func authenticationDataJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.authenticationDataJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "AuthenticationDataGuest", withExtension: "json")`
    static func authenticationDataGuestJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.authenticationDataGuestJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Business", withExtension: "json")`
    static func businessJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.businessJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "BusinessesList", withExtension: "json")`
    static func businessesListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.businessesListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CurrentFilters", withExtension: "json")`
    static func currentFiltersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.currentFiltersJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CurrentOrders", withExtension: "json")`
    static func currentOrdersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.currentOrdersJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Evolventa-Bold", withExtension: "ttf")`
    static func evolventaBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.evolventaBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Evolventa-BoldOblique", withExtension: "ttf")`
    static func evolventaBoldObliqueTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.evolventaBoldObliqueTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Evolventa-Oblique", withExtension: "ttf")`
    static func evolventaObliqueTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.evolventaObliqueTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Evolventa-Regular", withExtension: "ttf")`
    static func evolventaRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.evolventaRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Favorites", withExtension: "json")`
    static func favoritesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.favoritesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Orders", withExtension: "json")`
    static func ordersJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ordersJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Products", withExtension: "json")`
    static func productsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.productsJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "User", withExtension: "json")`
    static func userJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UserGuest", withExtension: "json")`
    static func userGuestJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userGuestJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Evolventa-BoldOblique`.
    static let evolventaBoldOblique = Rswift.FontResource(fontName: "Evolventa-BoldOblique")
    /// Font `Evolventa-Bold`.
    static let evolventaBold = Rswift.FontResource(fontName: "Evolventa-Bold")
    /// Font `Evolventa-Oblique`.
    static let evolventaOblique = Rswift.FontResource(fontName: "Evolventa-Oblique")
    /// Font `Evolventa-Regular`.
    static let evolventaRegular = Rswift.FontResource(fontName: "Evolventa-Regular")

    /// `UIFont(name: "Evolventa-Bold", size: ...)`
    static func evolventaBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: evolventaBold, size: size)
    }

    /// `UIFont(name: "Evolventa-BoldOblique", size: ...)`
    static func evolventaBoldOblique(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: evolventaBoldOblique, size: size)
    }

    /// `UIFont(name: "Evolventa-Oblique", size: ...)`
    static func evolventaOblique(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: evolventaOblique, size: size)
    }

    /// `UIFont(name: "Evolventa-Regular", size: ...)`
    static func evolventaRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: evolventaRegular, size: size)
    }

    static func validate() throws {
      if R.font.evolventaBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Evolventa-Bold' could not be loaded, is 'Evolventa-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.evolventaBoldOblique(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Evolventa-BoldOblique' could not be loaded, is 'Evolventa-BoldOblique.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.evolventaOblique(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Evolventa-Oblique' could not be loaded, is 'Evolventa-Oblique.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.evolventaRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Evolventa-Regular' could not be loaded, is 'Evolventa-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 38 images.
  struct image {
    /// Image `alert-circle`.
    static let alertCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert-circle")
    /// Image `arrow_down`.
    static let arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_down")
    /// Image `back_button`.
    static let back_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_button")
    /// Image `check-circle`.
    static let checkCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "check-circle")
    /// Image `circle-tick`.
    static let circleTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle-tick")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `clockGreen`.
    static let clockGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "clockGreen")
    /// Image `clockRed`.
    static let clockRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "clockRed")
    /// Image `favorite_Red_filled`.
    static let favorite_Red_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite_Red_filled")
    /// Image `favorite_Red_unfilled`.
    static let favorite_Red_unfilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite_Red_unfilled")
    /// Image `favorite_white`.
    static let favorite_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite_white")
    /// Image `globe`.
    static let globe = Rswift.ImageResource(bundle: R.hostingBundle, name: "globe")
    /// Image `listView`.
    static let listView = Rswift.ImageResource(bundle: R.hostingBundle, name: "listView")
    /// Image `list`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "list")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `man_in_cart`.
    static let man_in_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "man_in_cart")
    /// Image `map_blue`.
    static let map_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_blue")
    /// Image `map_pin_active`.
    static let map_pin_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_pin_active")
    /// Image `map_pin_unactive`.
    static let map_pin_unactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_pin_unactive")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `navigation`.
    static let navigation = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation")
    /// Image `phone`.
    static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone")
    /// Image `photo_placeholder`.
    static let photo_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo_placeholder")
    /// Image `pin-round`.
    static let pinRound = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin-round")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `several_items_blue`.
    static let several_items_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "several_items_blue")
    /// Image `shopping-cart-blue`.
    static let shoppingCartBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-cart-blue")
    /// Image `shopping-cart-yellow`.
    static let shoppingCartYellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-cart-yellow")
    /// Image `shopping-cart`.
    static let shoppingCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-cart")
    /// Image `sliders`.
    static let sliders = Rswift.ImageResource(bundle: R.hostingBundle, name: "sliders")
    /// Image `star_reviews`.
    static let star_reviews = Rswift.ImageResource(bundle: R.hostingBundle, name: "star_reviews")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `technical_break`.
    static let technical_break = Rswift.ImageResource(bundle: R.hostingBundle, name: "technical_break")
    /// Image `trash_red`.
    static let trash_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash_red")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `x-circle`.
    static let xCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "x-circle")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alert-circle", bundle: ..., traitCollection: ...)`
    static func alertCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_down", bundle: ..., traitCollection: ...)`
    static func arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_button", bundle: ..., traitCollection: ...)`
    static func back_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check-circle", bundle: ..., traitCollection: ...)`
    static func checkCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle-tick", bundle: ..., traitCollection: ...)`
    static func circleTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleTick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clockGreen", bundle: ..., traitCollection: ...)`
    static func clockGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clockRed", bundle: ..., traitCollection: ...)`
    static func clockRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite_Red_filled", bundle: ..., traitCollection: ...)`
    static func favorite_Red_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite_Red_filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite_Red_unfilled", bundle: ..., traitCollection: ...)`
    static func favorite_Red_unfilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite_Red_unfilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorite_white", bundle: ..., traitCollection: ...)`
    static func favorite_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "globe", bundle: ..., traitCollection: ...)`
    static func globe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.globe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "listView", bundle: ..., traitCollection: ...)`
    static func listView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "man_in_cart", bundle: ..., traitCollection: ...)`
    static func man_in_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.man_in_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_blue", bundle: ..., traitCollection: ...)`
    static func map_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_pin_active", bundle: ..., traitCollection: ...)`
    static func map_pin_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_pin_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_pin_unactive", bundle: ..., traitCollection: ...)`
    static func map_pin_unactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_pin_unactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation", bundle: ..., traitCollection: ...)`
    static func navigation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
    static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo_placeholder", bundle: ..., traitCollection: ...)`
    static func photo_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin-round", bundle: ..., traitCollection: ...)`
    static func pinRound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinRound, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "several_items_blue", bundle: ..., traitCollection: ...)`
    static func several_items_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.several_items_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-cart", bundle: ..., traitCollection: ...)`
    static func shoppingCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-cart-blue", bundle: ..., traitCollection: ...)`
    static func shoppingCartBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCartBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-cart-yellow", bundle: ..., traitCollection: ...)`
    static func shoppingCartYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingCartYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sliders", bundle: ..., traitCollection: ...)`
    static func sliders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star_reviews", bundle: ..., traitCollection: ...)`
    static func star_reviews(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_reviews, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "technical_break", bundle: ..., traitCollection: ...)`
    static func technical_break(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.technical_break, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash_red", bundle: ..., traitCollection: ...)`
    static func trash_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "x-circle", bundle: ..., traitCollection: ...)`
    static func xCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xCircle, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `AverageCheckCell`.
    static let averageCheckCell = _R.nib._AverageCheckCell()
    /// Nib `BusinessTypeCell`.
    static let businessTypeCell = _R.nib._BusinessTypeCell()
    /// Nib `OrderCell`.
    static let orderCell = _R.nib._OrderCell()
    /// Nib `OrganizationCell`.
    static let organizationCell = _R.nib._OrganizationCell()
    /// Nib `ProductCell`.
    static let productCell = _R.nib._ProductCell()
    /// Nib `TagCell`.
    static let tagCell = _R.nib._TagCell()
    /// Nib `TagItemCell`.
    static let tagItemCell = _R.nib._TagItemCell()
    /// Nib `TagsFilterCell`.
    static let tagsFilterCell = _R.nib._TagsFilterCell()
    /// Nib `TutorialCell`.
    static let tutorialCell = _R.nib._TutorialCell()
    /// Nib `TypeFilterCell`.
    static let typeFilterCell = _R.nib._TypeFilterCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AverageCheckCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.averageCheckCell) instead")
    static func averageCheckCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.averageCheckCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BusinessTypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.businessTypeCell) instead")
    static func businessTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.businessTypeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderCell) instead")
    static func orderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrganizationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.organizationCell) instead")
    static func organizationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.organizationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCell) instead")
    static func productCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TagCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagCell) instead")
    static func tagCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TagItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagItemCell) instead")
    static func tagItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TagsFilterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagsFilterCell) instead")
    static func tagsFilterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagsFilterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TutorialCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tutorialCell) instead")
    static func tutorialCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tutorialCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TypeFilterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.typeFilterCell) instead")
    static func typeFilterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.typeFilterCell)
    }
    #endif

    static func averageCheckCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AverageCheckCell? {
      return R.nib.averageCheckCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AverageCheckCell
    }

    static func businessTypeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessTypeCell? {
      return R.nib.businessTypeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessTypeCell
    }

    static func orderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
      return R.nib.orderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
    }

    static func organizationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationCell? {
      return R.nib.organizationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationCell
    }

    static func productCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
      return R.nib.productCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
    }

    static func tagCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCell? {
      return R.nib.tagCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCell
    }

    static func tagItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagItemCell? {
      return R.nib.tagItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagItemCell
    }

    static func tagsFilterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagsFilterCell? {
      return R.nib.tagsFilterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagsFilterCell
    }

    static func tutorialCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialCell? {
      return R.nib.tutorialCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialCell
    }

    static func typeFilterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TypeFilterCell? {
      return R.nib.typeFilterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TypeFilterCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 96 localization keys.
    struct localizable {
      /// Base translation: %@ UAH
      ///
      /// Locales: Base, ru, en
      static let uah_currency = Rswift.StringResource(key: "uah_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: %@k
      ///
      /// Locales: Base, ru, en
      static let kilo = Rswift.StringResource(key: "kilo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: %@km
      ///
      /// Locales: Base, ru, en
      static let km = Rswift.StringResource(key: "km", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: %@m
      ///
      /// Locales: Base, ru, en
      static let short_meters = Rswift.StringResource(key: "short_meters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: , %@
      ///
      /// Locales: Base, ru, en
      static let appeal = Rswift.StringResource(key: "appeal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Add +
      ///
      /// Locales: Base, ru, en
      static let add_plus = Rswift.StringResource(key: "add_plus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: All reviews
      ///
      /// Locales: Base, ru, en
      static let all_reviews = Rswift.StringResource(key: "all_reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Alphabetically
      ///
      /// Locales: Base, ru, en
      static let alphabetically = Rswift.StringResource(key: "alphabetically", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Amount:
      ///
      /// Locales: Base, ru, en
      static let amount = Rswift.StringResource(key: "amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Apply
      ///
      /// Locales: Base, ru, en
      static let apply = Rswift.StringResource(key: "apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Assortment
      ///
      /// Locales: Base, ru, en
      static let assortment = Rswift.StringResource(key: "assortment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Authorize
      ///
      /// Locales: Base, ru, en
      static let authorize = Rswift.StringResource(key: "authorize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Average check
      ///
      /// Locales: Base, ru, en
      static let average_check = Rswift.StringResource(key: "average_check", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By cuisine
      ///
      /// Locales: Base, ru, en
      static let by_cuisine = Rswift.StringResource(key: "by_cuisine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By distance
      ///
      /// Locales: Base, ru, en
      static let by_distance = Rswift.StringResource(key: "by_distance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By rating
      ///
      /// Locales: Base, ru, en
      static let by_rating = Rswift.StringResource(key: "by_rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: By tags
      ///
      /// Locales: Base, ru, en
      static let by_tags = Rswift.StringResource(key: "by_tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Cafes and restaurants
      ///
      /// Locales: Base, ru, en
      static let cafes_and_restaurants = Rswift.StringResource(key: "cafes_and_restaurants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Cancel
      ///
      /// Locales: Base, ru, en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Cancel order
      ///
      /// Locales: Base, ru, en
      static let cancel_order = Rswift.StringResource(key: "cancel_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Canceled
      ///
      /// Locales: Base, ru, en
      static let order_status_canceled = Rswift.StringResource(key: "order_status_canceled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Cart
      ///
      /// Locales: Base, ru, en
      static let cart = Rswift.StringResource(key: "cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Check internet connection.
      ///
      /// Locales: Base, ru, en
      static let check_internet = Rswift.StringResource(key: "check_internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Clear
      ///
      /// Locales: Base, ru, en
      static let clear = Rswift.StringResource(key: "clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Closed
      ///
      /// Locales: Base, ru, en
      static let closed = Rswift.StringResource(key: "closed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Coming soon...
      ///
      /// Locales: Base, ru, en
      static let coming_soon = Rswift.StringResource(key: "coming_soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Confirm password
      ///
      /// Locales: Base, ru, en
      static let confirm_password = Rswift.StringResource(key: "confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Continue as a guest
      ///
      /// Locales: Base, ru, en
      static let continue_as_a_guest = Rswift.StringResource(key: "continue_as_a_guest", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Cteate route
      ///
      /// Locales: Base, ru, en
      static let cteate_route = Rswift.StringResource(key: "cteate_route", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Current order
      ///
      /// Locales: Base, ru, en
      static let current_order = Rswift.StringResource(key: "current_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Current orders
      ///
      /// Locales: Base, ru, en
      static let current_orders = Rswift.StringResource(key: "current_orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: E-mail
      ///
      /// Locales: Base, ru, en
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Error occurred. Please, try again.
      ///
      /// Locales: Base, ru, en
      static let error_occurred = Rswift.StringResource(key: "error_occurred", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Exit
      ///
      /// Locales: Base, ru, en
      static let exit = Rswift.StringResource(key: "exit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Favorites
      ///
      /// Locales: Base, ru, en
      static let favorites = Rswift.StringResource(key: "favorites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Filters
      ///
      /// Locales: Base, ru, en
      static let filters = Rswift.StringResource(key: "filters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Fri.
      ///
      /// Locales: Base, ru, en
      static let short_friday = Rswift.StringResource(key: "short_friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Friday
      ///
      /// Locales: Base, ru, en
      static let friday = Rswift.StringResource(key: "friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: From
      ///
      /// Locales: Base, ru, en
      static let from = Rswift.StringResource(key: "from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Good afternoon%@!
      ///
      /// Locales: Base, ru, en
      static let good_afternoon_user = Rswift.StringResource(key: "good_afternoon_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Good evening%@!
      ///
      /// Locales: Base, ru, en
      static let good_evening_user = Rswift.StringResource(key: "good_evening_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Good morning%@!
      ///
      /// Locales: Base, ru, en
      static let good_morning_user = Rswift.StringResource(key: "good_morning_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Good night%@!
      ///
      /// Locales: Base, ru, en
      static let good_night_user = Rswift.StringResource(key: "good_night_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: In progress...
      ///
      /// Locales: Base, ru, en
      static let order_status_in_progress = Rswift.StringResource(key: "order_status_in_progress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Incorrect format. Please enter a valid email address
      ///
      /// Locales: Base, ru, en
      static let validation_explanation_email = Rswift.StringResource(key: "validation_explanation_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Incorrect format. Use +38(012)3456789
      ///
      /// Locales: Base, ru, en
      static let validation_explanation_phone = Rswift.StringResource(key: "validation_explanation_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: List
      ///
      /// Locales: Base, ru, en
      static let list = Rswift.StringResource(key: "list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Loading...
      ///
      /// Locales: Base, ru, en
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Make Order
      ///
      /// Locales: Base, ru, en
      static let make_order = Rswift.StringResource(key: "make_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Map
      ///
      /// Locales: Base, ru, en
      static let map = Rswift.StringResource(key: "map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Menu
      ///
      /// Locales: Base, ru, en
      static let menu = Rswift.StringResource(key: "menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Mon.
      ///
      /// Locales: Base, ru, en
      static let short_monday = Rswift.StringResource(key: "short_monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Monday
      ///
      /// Locales: Base, ru, en
      static let monday = Rswift.StringResource(key: "monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: My Orders
      ///
      /// Locales: Base, ru, en
      static let my_orders = Rswift.StringResource(key: "my_orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Name
      ///
      /// Locales: Base, ru, en
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Name must have at least 2 characters
      ///
      /// Locales: Base, ru, en
      static let validation_explanation_name = Rswift.StringResource(key: "validation_explanation_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Ok
      ///
      /// Locales: Base, ru, en
      static let ok_title = Rswift.StringResource(key: "ok_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Open
      ///
      /// Locales: Base, ru, en
      static let `open` = Rswift.StringResource(key: "open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Orders
      ///
      /// Locales: Base, ru, en
      static let orders = Rswift.StringResource(key: "orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Organization type
      ///
      /// Locales: Base, ru, en
      static let organization_type = Rswift.StringResource(key: "organization_type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Organizations
      ///
      /// Locales: Base, ru, en
      static let organizations = Rswift.StringResource(key: "organizations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Password
      ///
      /// Locales: Base, ru, en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Pay with card
      ///
      /// Locales: Base, ru, en
      static let pay_with_card = Rswift.StringResource(key: "pay_with_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Phone
      ///
      /// Locales: Base, ru, en
      static let phone = Rswift.StringResource(key: "phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Problem
      ///
      /// Locales: Base, ru, en
      static let order_status_problem = Rswift.StringResource(key: "order_status_problem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Profile
      ///
      /// Locales: Base, ru, en
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Ready
      ///
      /// Locales: Base, ru, en
      static let order_status_ready = Rswift.StringResource(key: "order_status_ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Sat.
      ///
      /// Locales: Base, ru, en
      static let short_saturday = Rswift.StringResource(key: "short_saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Saturday
      ///
      /// Locales: Base, ru, en
      static let saturday = Rswift.StringResource(key: "saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Search
      ///
      /// Locales: Base, ru, en
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Shops
      ///
      /// Locales: Base, ru, en
      static let shops = Rswift.StringResource(key: "shops", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Show the QR-code to the operator
      ///
      /// Locales: Base, ru, en
      static let show_qr_to_operator = Rswift.StringResource(key: "show_qr_to_operator", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Sign in
      ///
      /// Locales: Base, ru, en
      static let sign_in = Rswift.StringResource(key: "sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Sign up
      ///
      /// Locales: Base, ru, en
      static let sign_up = Rswift.StringResource(key: "sign_up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Start here
      ///
      /// Locales: Base, ru, en
      static let start_here = Rswift.StringResource(key: "start_here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Started
      ///
      /// Locales: Base, ru, en
      static let order_status_started = Rswift.StringResource(key: "order_status_started", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Successful
      ///
      /// Locales: Base, ru, en
      static let order_status_successful = Rswift.StringResource(key: "order_status_successful", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Sun.
      ///
      /// Locales: Base, ru, en
      static let short_sunday = Rswift.StringResource(key: "short_sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Sunday
      ///
      /// Locales: Base, ru, en
      static let sunday = Rswift.StringResource(key: "sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Technical break
      ///
      /// Locales: Base, ru, en
      static let tech_break = Rswift.StringResource(key: "tech_break", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: The password must have at least 6 characters
      ///
      /// Locales: Base, ru, en
      static let validation_explanation_password = Rswift.StringResource(key: "validation_explanation_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: The passwords do not match
      ///
      /// Locales: Base, ru, en
      static let validation_explanation_confirm_password = Rswift.StringResource(key: "validation_explanation_confirm_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Thu.
      ///
      /// Locales: Base, ru, en
      static let short_thursday = Rswift.StringResource(key: "short_thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Thursday
      ///
      /// Locales: Base, ru, en
      static let thursday = Rswift.StringResource(key: "thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: To
      ///
      /// Locales: Base, ru, en
      static let to = Rswift.StringResource(key: "to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Today
      ///
      /// Locales: Base, ru, en
      static let today = Rswift.StringResource(key: "today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Tomorrow
      ///
      /// Locales: Base, ru, en
      static let tomorrow = Rswift.StringResource(key: "tomorrow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Tue.
      ///
      /// Locales: Base, ru, en
      static let short_tuesday = Rswift.StringResource(key: "short_tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Tuesday
      ///
      /// Locales: Base, ru, en
      static let tuesday = Rswift.StringResource(key: "tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Wed.
      ///
      /// Locales: Base, ru, en
      static let short_wednesday = Rswift.StringResource(key: "short_wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Wednesday
      ///
      /// Locales: Base, ru, en
      static let wednesday = Rswift.StringResource(key: "wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Welcome back
      ///
      /// Locales: Base, ru, en
      static let welcome_back = Rswift.StringResource(key: "welcome_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Write to the support
      ///
      /// Locales: Base, ru, en
      static let write_to_support = Rswift.StringResource(key: "write_to_support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: Yes
      ///
      /// Locales: Base, ru, en
      static let yes_title = Rswift.StringResource(key: "yes_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: You can cancel order
      ///
      /// Locales: Base, ru, en
      static let you_can_cancel_order = Rswift.StringResource(key: "you_can_cancel_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)
      /// Base translation: until %@
      ///
      /// Locales: Base, ru, en
      static let until = Rswift.StringResource(key: "until", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru", "en"], comment: nil)

      /// Base translation: %@ UAH
      ///
      /// Locales: Base, ru, en
      static func uah_currency(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("uah_currency", bundle: hostingBundle, value: "%@ UAH", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uah_currency"
        }

        let format = NSLocalizedString("uah_currency", bundle: bundle, value: "%@ UAH", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %@k
      ///
      /// Locales: Base, ru, en
      static func kilo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("kilo", bundle: hostingBundle, value: "%@k", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kilo"
        }

        let format = NSLocalizedString("kilo", bundle: bundle, value: "%@k", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %@km
      ///
      /// Locales: Base, ru, en
      static func km(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("km", bundle: hostingBundle, value: "%@km", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "km"
        }

        let format = NSLocalizedString("km", bundle: bundle, value: "%@km", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: %@m
      ///
      /// Locales: Base, ru, en
      static func short_meters(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("short_meters", bundle: hostingBundle, value: "%@m", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_meters"
        }

        let format = NSLocalizedString("short_meters", bundle: bundle, value: "%@m", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: , %@
      ///
      /// Locales: Base, ru, en
      static func appeal(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("appeal", bundle: hostingBundle, value: ", %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appeal"
        }

        let format = NSLocalizedString("appeal", bundle: bundle, value: ", %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Add +
      ///
      /// Locales: Base, ru, en
      static func add_plus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plus", bundle: hostingBundle, value: "Add +", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plus"
        }

        return NSLocalizedString("add_plus", bundle: bundle, value: "Add +", comment: "")
      }

      /// Base translation: All reviews
      ///
      /// Locales: Base, ru, en
      static func all_reviews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all_reviews", bundle: hostingBundle, value: "All reviews", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "all_reviews"
        }

        return NSLocalizedString("all_reviews", bundle: bundle, value: "All reviews", comment: "")
      }

      /// Base translation: Alphabetically
      ///
      /// Locales: Base, ru, en
      static func alphabetically(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alphabetically", bundle: hostingBundle, value: "Alphabetically", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alphabetically"
        }

        return NSLocalizedString("alphabetically", bundle: bundle, value: "Alphabetically", comment: "")
      }

      /// Base translation: Amount:
      ///
      /// Locales: Base, ru, en
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("amount", bundle: hostingBundle, value: "Amount:", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "amount"
        }

        return NSLocalizedString("amount", bundle: bundle, value: "Amount:", comment: "")
      }

      /// Base translation: Apply
      ///
      /// Locales: Base, ru, en
      static func apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apply", bundle: hostingBundle, value: "Apply", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apply"
        }

        return NSLocalizedString("apply", bundle: bundle, value: "Apply", comment: "")
      }

      /// Base translation: Assortment
      ///
      /// Locales: Base, ru, en
      static func assortment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("assortment", bundle: hostingBundle, value: "Assortment", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "assortment"
        }

        return NSLocalizedString("assortment", bundle: bundle, value: "Assortment", comment: "")
      }

      /// Base translation: Authorize
      ///
      /// Locales: Base, ru, en
      static func authorize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authorize", bundle: hostingBundle, value: "Authorize", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authorize"
        }

        return NSLocalizedString("authorize", bundle: bundle, value: "Authorize", comment: "")
      }

      /// Base translation: Average check
      ///
      /// Locales: Base, ru, en
      static func average_check(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("average_check", bundle: hostingBundle, value: "Average check", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "average_check"
        }

        return NSLocalizedString("average_check", bundle: bundle, value: "Average check", comment: "")
      }

      /// Base translation: By cuisine
      ///
      /// Locales: Base, ru, en
      static func by_cuisine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by_cuisine", bundle: hostingBundle, value: "By cuisine", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "by_cuisine"
        }

        return NSLocalizedString("by_cuisine", bundle: bundle, value: "By cuisine", comment: "")
      }

      /// Base translation: By distance
      ///
      /// Locales: Base, ru, en
      static func by_distance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by_distance", bundle: hostingBundle, value: "By distance", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "by_distance"
        }

        return NSLocalizedString("by_distance", bundle: bundle, value: "By distance", comment: "")
      }

      /// Base translation: By rating
      ///
      /// Locales: Base, ru, en
      static func by_rating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by_rating", bundle: hostingBundle, value: "By rating", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "by_rating"
        }

        return NSLocalizedString("by_rating", bundle: bundle, value: "By rating", comment: "")
      }

      /// Base translation: By tags
      ///
      /// Locales: Base, ru, en
      static func by_tags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by_tags", bundle: hostingBundle, value: "By tags", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "by_tags"
        }

        return NSLocalizedString("by_tags", bundle: bundle, value: "By tags", comment: "")
      }

      /// Base translation: Cafes and restaurants
      ///
      /// Locales: Base, ru, en
      static func cafes_and_restaurants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cafes_and_restaurants", bundle: hostingBundle, value: "Cafes and restaurants", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cafes_and_restaurants"
        }

        return NSLocalizedString("cafes_and_restaurants", bundle: bundle, value: "Cafes and restaurants", comment: "")
      }

      /// Base translation: Cancel
      ///
      /// Locales: Base, ru, en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, value: "Cancel", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, value: "Cancel", comment: "")
      }

      /// Base translation: Cancel order
      ///
      /// Locales: Base, ru, en
      static func cancel_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel_order", bundle: hostingBundle, value: "Cancel order", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel_order"
        }

        return NSLocalizedString("cancel_order", bundle: bundle, value: "Cancel order", comment: "")
      }

      /// Base translation: Canceled
      ///
      /// Locales: Base, ru, en
      static func order_status_canceled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_status_canceled", bundle: hostingBundle, value: "Canceled", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_status_canceled"
        }

        return NSLocalizedString("order_status_canceled", bundle: bundle, value: "Canceled", comment: "")
      }

      /// Base translation: Cart
      ///
      /// Locales: Base, ru, en
      static func cart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart", bundle: hostingBundle, value: "Cart", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart"
        }

        return NSLocalizedString("cart", bundle: bundle, value: "Cart", comment: "")
      }

      /// Base translation: Check internet connection.
      ///
      /// Locales: Base, ru, en
      static func check_internet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_internet", bundle: hostingBundle, value: "Check internet connection.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_internet"
        }

        return NSLocalizedString("check_internet", bundle: bundle, value: "Check internet connection.", comment: "")
      }

      /// Base translation: Clear
      ///
      /// Locales: Base, ru, en
      static func clear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clear", bundle: hostingBundle, value: "Clear", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear"
        }

        return NSLocalizedString("clear", bundle: bundle, value: "Clear", comment: "")
      }

      /// Base translation: Closed
      ///
      /// Locales: Base, ru, en
      static func closed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("closed", bundle: hostingBundle, value: "Closed", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "closed"
        }

        return NSLocalizedString("closed", bundle: bundle, value: "Closed", comment: "")
      }

      /// Base translation: Coming soon...
      ///
      /// Locales: Base, ru, en
      static func coming_soon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coming_soon", bundle: hostingBundle, value: "Coming soon...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "coming_soon"
        }

        return NSLocalizedString("coming_soon", bundle: bundle, value: "Coming soon...", comment: "")
      }

      /// Base translation: Confirm password
      ///
      /// Locales: Base, ru, en
      static func confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_password", bundle: hostingBundle, value: "Confirm password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_password"
        }

        return NSLocalizedString("confirm_password", bundle: bundle, value: "Confirm password", comment: "")
      }

      /// Base translation: Continue as a guest
      ///
      /// Locales: Base, ru, en
      static func continue_as_a_guest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("continue_as_a_guest", bundle: hostingBundle, value: "Continue as a guest", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "continue_as_a_guest"
        }

        return NSLocalizedString("continue_as_a_guest", bundle: bundle, value: "Continue as a guest", comment: "")
      }

      /// Base translation: Cteate route
      ///
      /// Locales: Base, ru, en
      static func cteate_route(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cteate_route", bundle: hostingBundle, value: "Cteate route", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cteate_route"
        }

        return NSLocalizedString("cteate_route", bundle: bundle, value: "Cteate route", comment: "")
      }

      /// Base translation: Current order
      ///
      /// Locales: Base, ru, en
      static func current_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("current_order", bundle: hostingBundle, value: "Current order", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "current_order"
        }

        return NSLocalizedString("current_order", bundle: bundle, value: "Current order", comment: "")
      }

      /// Base translation: Current orders
      ///
      /// Locales: Base, ru, en
      static func current_orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("current_orders", bundle: hostingBundle, value: "Current orders", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "current_orders"
        }

        return NSLocalizedString("current_orders", bundle: bundle, value: "Current orders", comment: "")
      }

      /// Base translation: E-mail
      ///
      /// Locales: Base, ru, en
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, value: "E-mail", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, value: "E-mail", comment: "")
      }

      /// Base translation: Error occurred. Please, try again.
      ///
      /// Locales: Base, ru, en
      static func error_occurred(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_occurred", bundle: hostingBundle, value: "Error occurred. Please, try again.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_occurred"
        }

        return NSLocalizedString("error_occurred", bundle: bundle, value: "Error occurred. Please, try again.", comment: "")
      }

      /// Base translation: Exit
      ///
      /// Locales: Base, ru, en
      static func exit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exit", bundle: hostingBundle, value: "Exit", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "exit"
        }

        return NSLocalizedString("exit", bundle: bundle, value: "Exit", comment: "")
      }

      /// Base translation: Favorites
      ///
      /// Locales: Base, ru, en
      static func favorites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("favorites", bundle: hostingBundle, value: "Favorites", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "favorites"
        }

        return NSLocalizedString("favorites", bundle: bundle, value: "Favorites", comment: "")
      }

      /// Base translation: Filters
      ///
      /// Locales: Base, ru, en
      static func filters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("filters", bundle: hostingBundle, value: "Filters", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "filters"
        }

        return NSLocalizedString("filters", bundle: bundle, value: "Filters", comment: "")
      }

      /// Base translation: Fri.
      ///
      /// Locales: Base, ru, en
      static func short_friday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short_friday", bundle: hostingBundle, value: "Fri.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_friday"
        }

        return NSLocalizedString("short_friday", bundle: bundle, value: "Fri.", comment: "")
      }

      /// Base translation: Friday
      ///
      /// Locales: Base, ru, en
      static func friday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("friday", bundle: hostingBundle, value: "Friday", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "friday"
        }

        return NSLocalizedString("friday", bundle: bundle, value: "Friday", comment: "")
      }

      /// Base translation: From
      ///
      /// Locales: Base, ru, en
      static func from(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("from", bundle: hostingBundle, value: "From", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "from"
        }

        return NSLocalizedString("from", bundle: bundle, value: "From", comment: "")
      }

      /// Base translation: Good afternoon%@!
      ///
      /// Locales: Base, ru, en
      static func good_afternoon_user(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("good_afternoon_user", bundle: hostingBundle, value: "Good afternoon%@!", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "good_afternoon_user"
        }

        let format = NSLocalizedString("good_afternoon_user", bundle: bundle, value: "Good afternoon%@!", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Good evening%@!
      ///
      /// Locales: Base, ru, en
      static func good_evening_user(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("good_evening_user", bundle: hostingBundle, value: "Good evening%@!", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "good_evening_user"
        }

        let format = NSLocalizedString("good_evening_user", bundle: bundle, value: "Good evening%@!", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Good morning%@!
      ///
      /// Locales: Base, ru, en
      static func good_morning_user(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("good_morning_user", bundle: hostingBundle, value: "Good morning%@!", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "good_morning_user"
        }

        let format = NSLocalizedString("good_morning_user", bundle: bundle, value: "Good morning%@!", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: Good night%@!
      ///
      /// Locales: Base, ru, en
      static func good_night_user(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("good_night_user", bundle: hostingBundle, value: "Good night%@!", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "good_night_user"
        }

        let format = NSLocalizedString("good_night_user", bundle: bundle, value: "Good night%@!", comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Base translation: In progress...
      ///
      /// Locales: Base, ru, en
      static func order_status_in_progress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_status_in_progress", bundle: hostingBundle, value: "In progress...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_status_in_progress"
        }

        return NSLocalizedString("order_status_in_progress", bundle: bundle, value: "In progress...", comment: "")
      }

      /// Base translation: Incorrect format. Please enter a valid email address
      ///
      /// Locales: Base, ru, en
      static func validation_explanation_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation_explanation_email", bundle: hostingBundle, value: "Incorrect format. Please enter a valid email address", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation_explanation_email"
        }

        return NSLocalizedString("validation_explanation_email", bundle: bundle, value: "Incorrect format. Please enter a valid email address", comment: "")
      }

      /// Base translation: Incorrect format. Use +38(012)3456789
      ///
      /// Locales: Base, ru, en
      static func validation_explanation_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation_explanation_phone", bundle: hostingBundle, value: "Incorrect format. Use +38(012)3456789", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation_explanation_phone"
        }

        return NSLocalizedString("validation_explanation_phone", bundle: bundle, value: "Incorrect format. Use +38(012)3456789", comment: "")
      }

      /// Base translation: List
      ///
      /// Locales: Base, ru, en
      static func list(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("list", bundle: hostingBundle, value: "List", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "list"
        }

        return NSLocalizedString("list", bundle: bundle, value: "List", comment: "")
      }

      /// Base translation: Loading...
      ///
      /// Locales: Base, ru, en
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading", bundle: hostingBundle, value: "Loading...", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loading"
        }

        return NSLocalizedString("loading", bundle: bundle, value: "Loading...", comment: "")
      }

      /// Base translation: Make Order
      ///
      /// Locales: Base, ru, en
      static func make_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("make_order", bundle: hostingBundle, value: "Make Order", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "make_order"
        }

        return NSLocalizedString("make_order", bundle: bundle, value: "Make Order", comment: "")
      }

      /// Base translation: Map
      ///
      /// Locales: Base, ru, en
      static func map(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("map", bundle: hostingBundle, value: "Map", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "map"
        }

        return NSLocalizedString("map", bundle: bundle, value: "Map", comment: "")
      }

      /// Base translation: Menu
      ///
      /// Locales: Base, ru, en
      static func menu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu", bundle: hostingBundle, value: "Menu", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu"
        }

        return NSLocalizedString("menu", bundle: bundle, value: "Menu", comment: "")
      }

      /// Base translation: Mon.
      ///
      /// Locales: Base, ru, en
      static func short_monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short_monday", bundle: hostingBundle, value: "Mon.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_monday"
        }

        return NSLocalizedString("short_monday", bundle: bundle, value: "Mon.", comment: "")
      }

      /// Base translation: Monday
      ///
      /// Locales: Base, ru, en
      static func monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("monday", bundle: hostingBundle, value: "Monday", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "monday"
        }

        return NSLocalizedString("monday", bundle: bundle, value: "Monday", comment: "")
      }

      /// Base translation: My Orders
      ///
      /// Locales: Base, ru, en
      static func my_orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_orders", bundle: hostingBundle, value: "My Orders", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my_orders"
        }

        return NSLocalizedString("my_orders", bundle: bundle, value: "My Orders", comment: "")
      }

      /// Base translation: Name
      ///
      /// Locales: Base, ru, en
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, value: "Name", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, value: "Name", comment: "")
      }

      /// Base translation: Name must have at least 2 characters
      ///
      /// Locales: Base, ru, en
      static func validation_explanation_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation_explanation_name", bundle: hostingBundle, value: "Name must have at least 2 characters", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation_explanation_name"
        }

        return NSLocalizedString("validation_explanation_name", bundle: bundle, value: "Name must have at least 2 characters", comment: "")
      }

      /// Base translation: Ok
      ///
      /// Locales: Base, ru, en
      static func ok_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok_title", bundle: hostingBundle, value: "Ok", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok_title"
        }

        return NSLocalizedString("ok_title", bundle: bundle, value: "Ok", comment: "")
      }

      /// Base translation: Open
      ///
      /// Locales: Base, ru, en
      static func `open`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open", bundle: hostingBundle, value: "Open", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open"
        }

        return NSLocalizedString("open", bundle: bundle, value: "Open", comment: "")
      }

      /// Base translation: Orders
      ///
      /// Locales: Base, ru, en
      static func orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("orders", bundle: hostingBundle, value: "Orders", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "orders"
        }

        return NSLocalizedString("orders", bundle: bundle, value: "Orders", comment: "")
      }

      /// Base translation: Organization type
      ///
      /// Locales: Base, ru, en
      static func organization_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("organization_type", bundle: hostingBundle, value: "Organization type", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "organization_type"
        }

        return NSLocalizedString("organization_type", bundle: bundle, value: "Organization type", comment: "")
      }

      /// Base translation: Organizations
      ///
      /// Locales: Base, ru, en
      static func organizations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("organizations", bundle: hostingBundle, value: "Organizations", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "organizations"
        }

        return NSLocalizedString("organizations", bundle: bundle, value: "Organizations", comment: "")
      }

      /// Base translation: Password
      ///
      /// Locales: Base, ru, en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, value: "Password", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, value: "Password", comment: "")
      }

      /// Base translation: Pay with card
      ///
      /// Locales: Base, ru, en
      static func pay_with_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pay_with_card", bundle: hostingBundle, value: "Pay with card", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pay_with_card"
        }

        return NSLocalizedString("pay_with_card", bundle: bundle, value: "Pay with card", comment: "")
      }

      /// Base translation: Phone
      ///
      /// Locales: Base, ru, en
      static func phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone", bundle: hostingBundle, value: "Phone", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone"
        }

        return NSLocalizedString("phone", bundle: bundle, value: "Phone", comment: "")
      }

      /// Base translation: Problem
      ///
      /// Locales: Base, ru, en
      static func order_status_problem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_status_problem", bundle: hostingBundle, value: "Problem", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_status_problem"
        }

        return NSLocalizedString("order_status_problem", bundle: bundle, value: "Problem", comment: "")
      }

      /// Base translation: Profile
      ///
      /// Locales: Base, ru, en
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile", bundle: hostingBundle, value: "Profile", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile"
        }

        return NSLocalizedString("profile", bundle: bundle, value: "Profile", comment: "")
      }

      /// Base translation: Ready
      ///
      /// Locales: Base, ru, en
      static func order_status_ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_status_ready", bundle: hostingBundle, value: "Ready", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_status_ready"
        }

        return NSLocalizedString("order_status_ready", bundle: bundle, value: "Ready", comment: "")
      }

      /// Base translation: Sat.
      ///
      /// Locales: Base, ru, en
      static func short_saturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short_saturday", bundle: hostingBundle, value: "Sat.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_saturday"
        }

        return NSLocalizedString("short_saturday", bundle: bundle, value: "Sat.", comment: "")
      }

      /// Base translation: Saturday
      ///
      /// Locales: Base, ru, en
      static func saturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saturday", bundle: hostingBundle, value: "Saturday", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saturday"
        }

        return NSLocalizedString("saturday", bundle: bundle, value: "Saturday", comment: "")
      }

      /// Base translation: Search
      ///
      /// Locales: Base, ru, en
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", bundle: hostingBundle, value: "Search", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", bundle: bundle, value: "Search", comment: "")
      }

      /// Base translation: Shops
      ///
      /// Locales: Base, ru, en
      static func shops(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shops", bundle: hostingBundle, value: "Shops", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shops"
        }

        return NSLocalizedString("shops", bundle: bundle, value: "Shops", comment: "")
      }

      /// Base translation: Show the QR-code to the operator
      ///
      /// Locales: Base, ru, en
      static func show_qr_to_operator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("show_qr_to_operator", bundle: hostingBundle, value: "Show the QR-code to the operator", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "show_qr_to_operator"
        }

        return NSLocalizedString("show_qr_to_operator", bundle: bundle, value: "Show the QR-code to the operator", comment: "")
      }

      /// Base translation: Sign in
      ///
      /// Locales: Base, ru, en
      static func sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in", bundle: hostingBundle, value: "Sign in", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in"
        }

        return NSLocalizedString("sign_in", bundle: bundle, value: "Sign in", comment: "")
      }

      /// Base translation: Sign up
      ///
      /// Locales: Base, ru, en
      static func sign_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up", bundle: hostingBundle, value: "Sign up", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up"
        }

        return NSLocalizedString("sign_up", bundle: bundle, value: "Sign up", comment: "")
      }

      /// Base translation: Start here
      ///
      /// Locales: Base, ru, en
      static func start_here(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start_here", bundle: hostingBundle, value: "Start here", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start_here"
        }

        return NSLocalizedString("start_here", bundle: bundle, value: "Start here", comment: "")
      }

      /// Base translation: Started
      ///
      /// Locales: Base, ru, en
      static func order_status_started(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_status_started", bundle: hostingBundle, value: "Started", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_status_started"
        }

        return NSLocalizedString("order_status_started", bundle: bundle, value: "Started", comment: "")
      }

      /// Base translation: Successful
      ///
      /// Locales: Base, ru, en
      static func order_status_successful(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_status_successful", bundle: hostingBundle, value: "Successful", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_status_successful"
        }

        return NSLocalizedString("order_status_successful", bundle: bundle, value: "Successful", comment: "")
      }

      /// Base translation: Sun.
      ///
      /// Locales: Base, ru, en
      static func short_sunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short_sunday", bundle: hostingBundle, value: "Sun.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_sunday"
        }

        return NSLocalizedString("short_sunday", bundle: bundle, value: "Sun.", comment: "")
      }

      /// Base translation: Sunday
      ///
      /// Locales: Base, ru, en
      static func sunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sunday", bundle: hostingBundle, value: "Sunday", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sunday"
        }

        return NSLocalizedString("sunday", bundle: bundle, value: "Sunday", comment: "")
      }

      /// Base translation: Technical break
      ///
      /// Locales: Base, ru, en
      static func tech_break(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tech_break", bundle: hostingBundle, value: "Technical break", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tech_break"
        }

        return NSLocalizedString("tech_break", bundle: bundle, value: "Technical break", comment: "")
      }

      /// Base translation: The password must have at least 6 characters
      ///
      /// Locales: Base, ru, en
      static func validation_explanation_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation_explanation_password", bundle: hostingBundle, value: "The password must have at least 6 characters", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation_explanation_password"
        }

        return NSLocalizedString("validation_explanation_password", bundle: bundle, value: "The password must have at least 6 characters", comment: "")
      }

      /// Base translation: The passwords do not match
      ///
      /// Locales: Base, ru, en
      static func validation_explanation_confirm_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation_explanation_confirm_password", bundle: hostingBundle, value: "The passwords do not match", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation_explanation_confirm_password"
        }

        return NSLocalizedString("validation_explanation_confirm_password", bundle: bundle, value: "The passwords do not match", comment: "")
      }

      /// Base translation: Thu.
      ///
      /// Locales: Base, ru, en
      static func short_thursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short_thursday", bundle: hostingBundle, value: "Thu.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_thursday"
        }

        return NSLocalizedString("short_thursday", bundle: bundle, value: "Thu.", comment: "")
      }

      /// Base translation: Thursday
      ///
      /// Locales: Base, ru, en
      static func thursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thursday", bundle: hostingBundle, value: "Thursday", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thursday"
        }

        return NSLocalizedString("thursday", bundle: bundle, value: "Thursday", comment: "")
      }

      /// Base translation: To
      ///
      /// Locales: Base, ru, en
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to", bundle: hostingBundle, value: "To", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to"
        }

        return NSLocalizedString("to", bundle: bundle, value: "To", comment: "")
      }

      /// Base translation: Today
      ///
      /// Locales: Base, ru, en
      static func today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("today", bundle: hostingBundle, value: "Today", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "today"
        }

        return NSLocalizedString("today", bundle: bundle, value: "Today", comment: "")
      }

      /// Base translation: Tomorrow
      ///
      /// Locales: Base, ru, en
      static func tomorrow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tomorrow", bundle: hostingBundle, value: "Tomorrow", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tomorrow"
        }

        return NSLocalizedString("tomorrow", bundle: bundle, value: "Tomorrow", comment: "")
      }

      /// Base translation: Tue.
      ///
      /// Locales: Base, ru, en
      static func short_tuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short_tuesday", bundle: hostingBundle, value: "Tue.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_tuesday"
        }

        return NSLocalizedString("short_tuesday", bundle: bundle, value: "Tue.", comment: "")
      }

      /// Base translation: Tuesday
      ///
      /// Locales: Base, ru, en
      static func tuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tuesday", bundle: hostingBundle, value: "Tuesday", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tuesday"
        }

        return NSLocalizedString("tuesday", bundle: bundle, value: "Tuesday", comment: "")
      }

      /// Base translation: Wed.
      ///
      /// Locales: Base, ru, en
      static func short_wednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short_wednesday", bundle: hostingBundle, value: "Wed.", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short_wednesday"
        }

        return NSLocalizedString("short_wednesday", bundle: bundle, value: "Wed.", comment: "")
      }

      /// Base translation: Wednesday
      ///
      /// Locales: Base, ru, en
      static func wednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wednesday", bundle: hostingBundle, value: "Wednesday", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wednesday"
        }

        return NSLocalizedString("wednesday", bundle: bundle, value: "Wednesday", comment: "")
      }

      /// Base translation: Welcome back
      ///
      /// Locales: Base, ru, en
      static func welcome_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome_back", bundle: hostingBundle, value: "Welcome back", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome_back"
        }

        return NSLocalizedString("welcome_back", bundle: bundle, value: "Welcome back", comment: "")
      }

      /// Base translation: Write to the support
      ///
      /// Locales: Base, ru, en
      static func write_to_support(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("write_to_support", bundle: hostingBundle, value: "Write to the support", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "write_to_support"
        }

        return NSLocalizedString("write_to_support", bundle: bundle, value: "Write to the support", comment: "")
      }

      /// Base translation: Yes
      ///
      /// Locales: Base, ru, en
      static func yes_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes_title", bundle: hostingBundle, value: "Yes", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yes_title"
        }

        return NSLocalizedString("yes_title", bundle: bundle, value: "Yes", comment: "")
      }

      /// Base translation: You can cancel order
      ///
      /// Locales: Base, ru, en
      static func you_can_cancel_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you_can_cancel_order", bundle: hostingBundle, value: "You can cancel order", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you_can_cancel_order"
        }

        return NSLocalizedString("you_can_cancel_order", bundle: bundle, value: "You can cancel order", comment: "")
      }

      /// Base translation: until %@
      ///
      /// Locales: Base, ru, en
      static func until(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("until", bundle: hostingBundle, value: "until %@", comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "until"
        }

        let format = NSLocalizedString("until", bundle: bundle, value: "until %@", comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _OrganizationCell.validate()
      try _TagItemCell.validate()
    }

    struct _AverageCheckCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AverageCheckCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AverageCheckCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AverageCheckCell
      }

      fileprivate init() {}
    }

    struct _BusinessTypeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BusinessTypeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BusinessTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BusinessTypeCell
      }

      fileprivate init() {}
    }

    struct _OrderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
      }

      fileprivate init() {}
    }

    struct _OrganizationCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrganizationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "clockGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clockGreen' is used in nib 'OrganizationCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigation' is used in nib 'OrganizationCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star_reviews", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star_reviews' is used in nib 'OrganizationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
      }

      fileprivate init() {}
    }

    struct _TagCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TagCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCell
      }

      fileprivate init() {}
    }

    struct _TagItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TagItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagItemCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "circle-tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle-tick' is used in nib 'TagItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TagsFilterCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TagsFilterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagsFilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagsFilterCell
      }

      fileprivate init() {}
    }

    struct _TutorialCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TutorialCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TutorialCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TutorialCell
      }

      fileprivate init() {}
    }

    struct _TypeFilterCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TypeFilterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TypeFilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TypeFilterCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try cartVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try favoritesVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mapVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try ordersVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileVC.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct cartVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CartVC

      let bundle = R.hostingBundle
      let name = "CartVC"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct favoritesVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FavoritesVC

      let bundle = R.hostingBundle
      let name = "FavoritesVC"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mapVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MapVC

      let bundle = R.hostingBundle
      let name = "MapVC"

      static func validate() throws {
        if UIKit.UIImage(named: "listView", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listView' is used in storyboard 'MapVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sliders", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sliders' is used in storyboard 'MapVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct ordersVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OrdersVC

      let bundle = R.hostingBundle
      let name = "OrdersVC"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileVC

      let bundle = R.hostingBundle
      let name = "ProfileVC"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
